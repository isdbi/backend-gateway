// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET is_active = TRUE
WHERE id = $1
`

// Activate user
func (q *Queries) ActivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :exec

INSERT INTO users (id, email, password, name, family_name, age, sex) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	ID         pgtype.UUID
	Email      string
	Password   string
	Name       string
	FamilyName string
	Age        pgtype.Int4
	Sex        pgtype.Text
}

// db/queries/users.sql
// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.FamilyName,
		arg.Age,
		arg.Sex,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

// Delete a user
func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, family_name, age, sex, is_active FROM users 
WHERE email = $1
`

// Get a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.FamilyName,
		&i.Age,
		&i.Sex,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, name, family_name, age, sex, is_active FROM users
WHERE id = $1
`

// Get a user by ID
func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.FamilyName,
		&i.Age,
		&i.Sex,
		&i.IsActive,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, name, family_name, age, sex, is_active FROM users
`

// Get all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.FamilyName,
			&i.Age,
			&i.Sex,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email = $2, password = $3, name = $4, age = $5, family_name = $6, sex = $7
WHERE id = $1
`

type UpdateUserParams struct {
	ID         pgtype.UUID
	Email      string
	Password   string
	Name       string
	Age        pgtype.Int4
	FamilyName string
	Sex        pgtype.Text
}

// Update user information
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Age,
		arg.FamilyName,
		arg.Sex,
	)
	return err
}
