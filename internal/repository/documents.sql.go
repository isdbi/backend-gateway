// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: documents.sql

package repository

import (
	"context"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
    property_type,
    name,
    content,
    metadata
) VALUES (
    $1, $2, $3, $4
) RETURNING id, property_type, name, content, created_at, updated_at, metadata
`

type CreateDocumentParams struct {
	PropertyType PropertyType
	Name         string
	Content      string
	Metadata     []byte
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.PropertyType,
		arg.Name,
		arg.Content,
		arg.Metadata,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.PropertyType,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents
WHERE id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDocument, id)
	return err
}

const getDocument = `-- name: GetDocument :one
SELECT id, property_type, name, content, created_at, updated_at, metadata FROM documents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, id int64) (Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.PropertyType,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, property_type, name, content, created_at, updated_at, metadata FROM documents
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListDocumentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.PropertyType,
			&i.Name,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocumentsByPropertyType = `-- name: ListDocumentsByPropertyType :many
SELECT id, property_type, name, content, created_at, updated_at, metadata FROM documents
WHERE property_type = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListDocumentsByPropertyTypeParams struct {
	PropertyType PropertyType
	Limit        int32
	Offset       int32
}

func (q *Queries) ListDocumentsByPropertyType(ctx context.Context, arg ListDocumentsByPropertyTypeParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocumentsByPropertyType, arg.PropertyType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.PropertyType,
			&i.Name,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDocuments = `-- name: SearchDocuments :many
SELECT id, property_type, name, content, created_at, updated_at, metadata FROM documents
WHERE name ILIKE $1 OR content ILIKE $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type SearchDocumentsParams struct {
	Name   string
	Limit  int32
	Offset int32
}

func (q *Queries) SearchDocuments(ctx context.Context, arg SearchDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, searchDocuments, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.PropertyType,
			&i.Name,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
UPDATE documents
SET 
    property_type = $2,
    name = $3,
    content = $4,
    metadata = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, property_type, name, content, created_at, updated_at, metadata
`

type UpdateDocumentParams struct {
	ID           int64
	PropertyType PropertyType
	Name         string
	Content      string
	Metadata     []byte
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, updateDocument,
		arg.ID,
		arg.PropertyType,
		arg.Name,
		arg.Content,
		arg.Metadata,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.PropertyType,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}
