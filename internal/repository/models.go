// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PropertyType string

const (
	PropertyTypeVehicle            PropertyType = "vehicle"
	PropertyTypeLand               PropertyType = "land"
	PropertyTypeResidentalHouse    PropertyType = "residental_house"
	PropertyTypeInvestmentProperty PropertyType = "investment_property"
)

func (e *PropertyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PropertyType(s)
	case string:
		*e = PropertyType(s)
	default:
		return fmt.Errorf("unsupported scan type for PropertyType: %T", src)
	}
	return nil
}

type NullPropertyType struct {
	PropertyType PropertyType
	Valid        bool // Valid is true if PropertyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPropertyType) Scan(value interface{}) error {
	if value == nil {
		ns.PropertyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PropertyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPropertyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PropertyType), nil
}

type Document struct {
	ID           int64
	PropertyType PropertyType
	Name         string
	Content      string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	Metadata     []byte
}

type User struct {
	ID         pgtype.UUID
	Email      string
	Password   string
	Name       string
	FamilyName string
	Age        pgtype.Int4
	Sex        pgtype.Text
	IsActive   bool
}
